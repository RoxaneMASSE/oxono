@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "oxono.model.Board",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_104069929 { 
   	label=model
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Board1116375650[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Board</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   grid: Pawn[][] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   posTotemO: Position [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   posTotemX: Position [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   size: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- extractBottom(startPosition: Position): Pawn[]</TD></TR>
<TR><TD ALIGN="LEFT" >- extractLeft(startPosition: Position): Pawn[]</TD></TR>
<TR><TD ALIGN="LEFT" >- extractRight(startPosition: Position): Pawn[]</TD></TR>
<TR><TD ALIGN="LEFT" >- extractTop(startPosition: Position): Pawn[]</TD></TR>
<TR><TD ALIGN="LEFT" >- getPositionTotem(totem: Totem): Position</TD></TR>
<TR><TD ALIGN="LEFT" >- getSection(startPosition: Position, endPosition: Position): Pawn[]</TD></TR>
<TR><TD ALIGN="LEFT" >- isBeforeFirstBusyPosition(startPosition: Position, endPosition: Position): Boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isEmpty(position: Position): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isEmpty(pawns: Pawn[], i: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isEnclosure(position: Position): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isFirstFreePosition(startPosition: Position, endPosition: Position): Boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isFullEnclosure(position: Position): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isInGrid(position: Position): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isValidMove(totem: Totem, position: Position): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
<TR><TD ALIGN="LEFT" >+ putToken()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Game1116375650[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Game</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   board: Board [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   currentPlayer: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   playerBlack: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   playerPink: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   toInsert: Symbol [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Pawn1116375650[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Pawn</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   symbol: Symbol [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Position1116375650[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Position</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   col: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   row: int [1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Token1116375650[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Token</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   color: Color [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Totem1116375650[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Totem</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
Board1116375650 -> Pawn1116375650[label="grid
[0..*]"];
Board1116375650 -> Position1116375650[label="posTotemO
[0..1]"];
Board1116375650 -> Position1116375650[label="posTotemX
[0..1]"];
Game1116375650 -> Board1116375650[label="board
[0..1]"];
Pawn1116375650 -> Token1116375650[arrowhead=none, arrowtail=empty, dir=both];
Pawn1116375650 -> Totem1116375650[arrowhead=none, arrowtail=empty, dir=both];
    
}
@enduml